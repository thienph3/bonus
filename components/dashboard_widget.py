from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
from .step_widget import StepWidget


class DashboardWidget(QWidget):
    import_requested = pyqtSignal()
    calculate_requested = pyqtSignal()
    export_requested = pyqtSignal()
    reset_requested = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()
        self.reset_workflow()

    def init_ui(self):
        layout = QVBoxLayout()

        # Title
        title = QLabel("Quy tr√¨nh t√≠nh th∆∞·ªüng")
        title.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("margin: 20px; color: #333;")

        # Steps
        self.step1 = StepWidget(
            1,
            "Nh·∫≠p d·ªØ li·ªáu",
            "Nh·∫≠p file Excel (D·ªØ li·ªáu + C·∫•u h√¨nh)",
            "Nh·∫≠p d·ªØ li·ªáu ch√≠nh, c·∫•u h√¨nh c·∫•p ƒë·ªô v√† ng√†y l·ªÖ",
            "Ch·ªçn file Excel",
        )

        self.step2 = StepWidget(
            2,
            "T√≠nh to√°n k·∫øt qu·∫£",
            "X·ª≠ l√Ω t√≠nh to√°n th∆∞·ªüng",
            "K·∫øt h·ª£p d·ªØ li·ªáu v·ªõi c·∫•u h√¨nh ƒë·ªÉ t√≠nh th∆∞·ªüng",
            "T√≠nh to√°n th∆∞·ªüng",
        )

        self.step3 = StepWidget(
            3,
            "Xu·∫•t k·∫øt qu·∫£",
            "Xu·∫•t k·∫øt qu·∫£ ra Excel",
            "T·∫£i k·∫øt qu·∫£ ƒë√£ t√≠nh v·ªõi ƒë·ªãnh d·∫°ng",
            "Xu·∫•t ra Excel",
        )

        # Reset button
        self.reset_button = QPushButton("üîÑ B·∫Øt ƒë·∫ßu t√≠nh to√°n m·ªõi")
        self.reset_button.setStyleSheet(
            """
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """
        )
        self.reset_button.clicked.connect(self.reset_workflow)
        self.reset_button.setVisible(False)

        # Connect signals
        self.step1.button.clicked.connect(self.import_requested.emit)
        self.step2.button.clicked.connect(self.calculate_requested.emit)
        self.step3.button.clicked.connect(self.export_requested.emit)

        layout.addWidget(title)
        layout.addWidget(self.step1)
        layout.addWidget(self.step2)
        layout.addWidget(self.step3)
        layout.addWidget(self.reset_button)
        layout.addStretch()

        self.setLayout(layout)

    def reset_workflow(self):
        """Reset workflow to initial state"""
        self.step1.set_status("ready", "Nh·∫≠p d·ªØ li·ªáu ch√≠nh, c·∫•u h√¨nh c·∫•p ƒë·ªô v√† ng√†y l·ªÖ")
        self.step1.set_enabled(True)

        self.step2.set_status("ready", "K·∫øt h·ª£p d·ªØ li·ªáu v·ªõi c·∫•u h√¨nh ƒë·ªÉ t√≠nh th∆∞·ªüng")
        self.step2.set_enabled(False)

        self.step3.set_status("ready", "T·∫£i k·∫øt qu·∫£ ƒë√£ t√≠nh v·ªõi ƒë·ªãnh d·∫°ng")
        self.step3.set_enabled(False)

        self.reset_button.setVisible(False)
        self.reset_requested.emit()

    def on_import_started(self):
        self.step1.set_status("processing", "ƒêang nh·∫≠p d·ªØ li·ªáu...")
        self.step1.set_enabled(False)

    def on_import_completed(self, stats=None):
        if stats:
            message = f"‚úÖ ƒê√£ nh·∫≠p: {stats.get('records', 0)} b·∫£n ghi, {stats.get('levels', 0)} c·∫•p ƒë·ªô, {stats.get('holidays', 0)} ng√†y l·ªÖ"
        else:
            message = "Nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng"
        self.step1.set_status("completed", message)
        self.step2.set_enabled(True)

    def on_import_error(self, error_msg):
        self.step1.set_status("error", f"Nh·∫≠p d·ªØ li·ªáu th·∫•t b·∫°i: {error_msg}")
        self.step1.set_enabled(True)

    def on_calculate_started(self):
        self.step2.set_status("processing", "ƒêang t√≠nh to√°n th∆∞·ªüng...")
        self.step2.set_enabled(False)

    def on_calculate_completed(self, stats=None):
        if stats:
            message = f"‚úÖ ƒê√£ t√≠nh: {stats.get('total_records', 0)} b·∫£n ghi, T·ªïng th∆∞·ªüng: {stats.get('total_bonus', 0):,.0f} VNƒê"
        else:
            message = "T√≠nh to√°n ho√†n t·∫•t th√†nh c√¥ng"
        self.step2.set_status("completed", message)
        self.step3.set_enabled(True)

    def on_calculate_error(self, error_msg):
        self.step2.set_status("error", f"T√≠nh to√°n th·∫•t b·∫°i: {error_msg}")
        self.step2.set_enabled(True)

    def on_export_started(self):
        self.step3.set_status("processing", "ƒêang xu·∫•t d·ªØ li·ªáu...")
        self.step3.set_enabled(False)

    def on_export_completed(self, file_path=None):
        if file_path:
            import os

            filename = os.path.basename(file_path)
            message = f"‚úÖ ƒê√£ xu·∫•t: {filename}"
        else:
            message = "Xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng"
        self.step3.set_status("completed", message)
        self.reset_button.setVisible(True)

    def on_export_error(self, error_msg):
        self.step3.set_status("error", f"Xu·∫•t d·ªØ li·ªáu th·∫•t b·∫°i: {error_msg}")
        self.step3.set_enabled(True)
